services:
  postgres:
    image: postgres:17.4
    environment:
      POSTGRES_DB: antithesis
      POSTGRES_USER: antithesis
      POSTGRES_PASSWORD: antithesis
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U antithesis']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - ./src:/app/src
      - ./views:/app/views
      - ./public:/app/public
      - ./tsconfig.json:/app/tsconfig.json
      - ./package.json:/app/package.json
      - ./eslint.config.js:/app/eslint.config.js
      - ./tailwind.config.js:/app/tailwind.config.js
      - ./postcss.config.js:/app/postcss.config.js
      - ./.env:/app/.env
      # Prevent node_modules from being overridden
      - /app/node_modules
    ports:
      - '3000:3000' # Public API
      - '3001:3001' # Admin API
      - '3002:3002' # Meta API (health/ready)
    environment:
      - NODE_ENV=development
      - PUBLIC_API_PORT=3000
      - ADMIN_API_PORT=3001
      - META_API_PORT=3002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=antithesis
      - DB_USER=antithesis
      - DB_PASSWORD=antithesis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    stdin_open: true
    tty: true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  postgres_data:
  redis_data:
