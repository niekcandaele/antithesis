/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from 'kysely';

export type Generated<T> =
  T extends ColumnType<infer S, infer I, infer U>
    ? ColumnType<S, I | undefined, U>
    : ColumnType<T, T | undefined, T>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Albums {
  coverPhotoUrl: string | null;
  createdAt: Generated<Timestamp>;
  createdByUserId: string;
  deletedAt: Timestamp | null;
  deletedByUserId: string | null;
  description: string | null;
  id: Generated<string>;
  isDeleted: Generated<boolean>;
  name: string;
  status: Generated<string>;
  tenantId: string;
  updatedAt: Generated<Timestamp>;
}

export interface Photos {
  albumId: string;
  createdAt: Generated<Timestamp>;
  createdByUserId: string;
  deletedAt: Timestamp | null;
  deletedByUserId: string | null;
  description: string | null;
  id: Generated<string>;
  isDeleted: Generated<boolean>;
  status: Generated<string>;
  tenantId: string;
  thumbnailUrl: string | null;
  title: string;
  updatedAt: Generated<Timestamp>;
  url: string;
}

export interface Roles {
  createdAt: Generated<Timestamp>;
  id: Generated<string>;
  name: string;
  updatedAt: Generated<Timestamp>;
}

export interface Tenants {
  createdAt: Generated<Timestamp>;
  externalReferenceId: string | null;
  id: Generated<string>;
  keycloakOrganizationId: string | null;
  name: string;
  slug: string;
  updatedAt: Generated<Timestamp>;
}

export interface UserRoles {
  createdAt: Generated<Timestamp>;
  roleId: string;
  tenantId: string;
  userId: string;
}

export interface Users {
  createdAt: Generated<Timestamp>;
  email: string;
  id: Generated<string>;
  keycloakUserId: string;
  lastTenantId: string | null;
  updatedAt: Generated<Timestamp>;
}

export interface UserTenants {
  createdAt: Generated<Timestamp>;
  tenantId: string;
  userId: string;
}

export interface DB {
  albums: Albums;
  photos: Photos;
  roles: Roles;
  tenants: Tenants;
  user_roles: UserRoles;
  user_tenants: UserTenants;
  users: Users;
}

// Backward compatibility alias
export type Database = DB;
